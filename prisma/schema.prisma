// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum State {
  AL
  AK
  AZ
  AR
  CA
  CO
  CT
  DE
  DC
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  email          String  @unique
  emailConfirmed Boolean @default(false)
  password       String
  firstName      String
  lastName       String

  city  String?
  state State?

  inches Int?
  lbs    Int?
  DOB    DateTime?
  gender Gender?

  seed Boolean @default(false)

  workouts      Workout[]
  badges        Badge[]
  notifications Notification[]
  reactions     Reaction[]
}

model Notification {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  message     String
  unread      Boolean  @default(true)
  open        Boolean  @default(true)
  dismissable Boolean  @default(true)
  buttonUrl   String?

  userId String
  users  User   @relation(fields: [userId], references: [id])
}

model WorkoutType {
  id        String    @id @default(uuid())
  name      String
  sortOrder Int       @default(100)
  workouts  Workout[]
}

model Workout {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location String?
  start    DateTime @default(now())
  end      DateTime @default(now())
  distance Decimal? @default(0)
  steps    Int?     @default(0)
  calories Int?     @default(0)
  notes    String?

  seed Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  workoutTypeId String
  workoutType   WorkoutType @relation(fields: [workoutTypeId], references: [id])
  reactions     Reaction[]
}

model Badge {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type  String?
  notes String?

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Reaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emojiSymbol String

  seed Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  workoutId String
  workout   Workout @relation(fields: [workoutId], references: [id])

  @@unique([workoutId, userId])
}
